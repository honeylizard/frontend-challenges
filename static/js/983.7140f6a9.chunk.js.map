{"version":3,"file":"static/js/983.7140f6a9.chunk.js","mappings":"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","sources":["webpack://frontend-challenges/./src/styles/countries-api/countries-list-item.module.scss?1dd5","components/CountriesList/common/LazyImage.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","components/CountriesList/CountriesListItem.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"link\":\"countries-list-item_link__QgMVT\",\"wrapper\":\"countries-list-item_wrapper__SY5Hj\",\"content\":\"countries-list-item_content__WUG2O\",\"sr-only\":\"countries-list-item_sr-only__-pRWE\",\"sr-focusable\":\"countries-list-item_sr-focusable__L5hSz\",\"tableBordered\":\"countries-list-item_tableBordered__b9Wa8\",\"solutionContainer\":\"countries-list-item_solutionContainer__kaDrV\",\"header\":\"countries-list-item_header__tavvP\",\"headerTitle\":\"countries-list-item_headerTitle__Q-q0V\",\"themeModeButton\":\"countries-list-item_themeModeButton__My8o5\",\"footer\":\"countries-list-item_footer__o2En1\",\"solutionContainerLight\":\"countries-list-item_solutionContainerLight__7qGlS\",\"solutionContainerDark\":\"countries-list-item_solutionContainerDark__bTw9Z\",\"listItemContainer\":\"countries-list-item_listItemContainer__xXHMx\",\"listItemContent\":\"countries-list-item_listItemContent__fj1ML\",\"listItemContainerDark\":\"countries-list-item_listItemContainerDark__jQR5-\",\"listItemContainerLight\":\"countries-list-item_listItemContainerLight__270hL\"};","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst LazyImage = ({ placeholderImage, alt = \"\", ...props }) => {\r\n    const [inView, setInView] = useState(false);\r\n    const placeholderRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver((entries, obs) => {\r\n            for (const entry of entries) {\r\n                if (entry.isIntersecting) {\r\n                    setInView(true);\r\n                    obs.disconnect();\r\n                }\r\n            }\r\n        }, {});\r\n        observer.observe(placeholderRef.current);\r\n        return () => {\r\n            observer.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    return inView ? (\r\n        <img alt={alt} {...props} />\r\n    ) : (\r\n        <img ref={placeholderRef} src={placeholderImage} alt={alt} {...props} />\r\n    );\r\n};\r\n\r\nLazyImage.propTypes = {\r\n    placeholderImage: PropTypes.string.isRequired,\r\n    alt: PropTypes.string,\r\n};\r\n\r\nexport default LazyImage;\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GlobalContext } from \"../../GlobalStateProvider\";\r\nimport countriesListItemStyle from \"../../styles/countries-api/countries-list-item.module.scss\";\r\nimport CountryDataPoint from \"./CountryDataPoint\";\r\nimport LazyImage from \"./common/LazyImage\";\r\n\r\nconst CountriesListItem = ({ intl, data }) => {\r\n    const { countriesApi: globalData } = useContext(GlobalContext);\r\n    const currentTheme = globalData.darkMode;\r\n\r\n    const linkTooltip = intl.formatMessage(\r\n        {\r\n            id: \"countriesApi.countries.linkTooltip\",\r\n        },\r\n        {\r\n            name: data.name,\r\n        }\r\n    );\r\n    const imageAlt = intl.formatMessage(\r\n        {\r\n            id: \"countriesApi.countries.flagImageAlt\",\r\n        },\r\n        {\r\n            name: data.name,\r\n        }\r\n    );\r\n\r\n    const classes = [\r\n        countriesListItemStyle.listItemContainer,\r\n        currentTheme\r\n            ? countriesListItemStyle.listItemContainerDark\r\n            : countriesListItemStyle.listItemContainerLight,\r\n    ].filter(Boolean);\r\n\r\n    return (\r\n        <div className={classes.join(\" \")}>\r\n            <Link\r\n                to={`/frontend-challenges/countries-api/country/${data.alpha3Code}`}\r\n                title={linkTooltip}\r\n            >\r\n                <div className={countriesListItemStyle.listItemImage}>\r\n                    <LazyImage\r\n                        src={data.flag}\r\n                        alt={imageAlt}\r\n                        placeholderImage={\r\n                            process.env.PUBLIC_URL +\r\n                            \"/assets/flag_placeholder.jpg\"\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className={countriesListItemStyle.listItemContent}>\r\n                    <h3>{data.name}</h3>\r\n                    <div className={countriesListItemStyle.listItemDetails}>\r\n                        <CountryDataPoint\r\n                            value={data.population}\r\n                            labelIntlId=\"countriesApi.countries.population\"\r\n                        />\r\n                        <CountryDataPoint\r\n                            value={data.region}\r\n                            labelIntlId=\"countriesApi.countries.region\"\r\n                        />\r\n                        <CountryDataPoint\r\n                            value={data.capital}\r\n                            labelIntlId=\"countriesApi.countries.capital\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nCountriesListItem.propTypes = {\r\n    intl: PropTypes.object.isRequired,\r\n    data: PropTypes.shape({\r\n        alpha3Code: PropTypes.string.isRequired,\r\n        name: PropTypes.string,\r\n        flag: PropTypes.string,\r\n        capital: PropTypes.string,\r\n        region: PropTypes.string,\r\n        population: PropTypes.number,\r\n    }).isRequired,\r\n};\r\n\r\nexport default injectIntl(CountriesListItem);\r\n"],"names":["placeholderImage","alt","props","useState","inView","setInView","placeholderRef","useRef","useEffect","observer","IntersectionObserver","entries","obs","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","isIntersecting","disconnect","observe","current","ref","src","injectIntl","intl","data","currentTheme","useContext","GlobalContext","countriesApi","darkMode","linkTooltip","formatMessage","id","name","imageAlt","classes","countriesListItemStyle","filter","Boolean","className","join","to","alpha3Code","title","flag","process","CountryDataPoint","population","labelIntlId","region","capital"],"sourceRoot":""}