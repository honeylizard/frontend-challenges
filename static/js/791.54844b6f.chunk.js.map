{"version":3,"file":"static/js/791.54844b6f.chunk.js","mappings":"kMACA,SAAgB,KAAO,kCAAkC,QAAU,qCAAqC,QAAU,qCAAqC,UAAU,qCAAqC,eAAe,0CAA0C,cAAgB,2CAA2C,kBAAoB,+CAA+C,gBAAkB,6CAA6C,sBAAwB,mDAAmD,uBAAyB,qD,8ECiChiB,EA/BkBA,IAA+C,IAA9C,iBAAEC,EAAgB,IAAEC,EAAM,IAAcF,EAAPG,GAAKC,EAAAA,EAAAA,GAAAJ,EAAAK,GACrD,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,GAC/BC,GAAiBC,EAAAA,EAAAA,UAiBvB,OAfAC,EAAAA,EAAAA,WAAU,KACN,MAAMC,EAAW,IAAIC,qBAAqB,CAACC,EAASC,KAChD,IAAK,MAAMC,KAASF,EACZE,EAAMC,iBACNV,GAAU,GACVQ,EAAIG,eAGb,CAAC,GAEJ,OADAN,EAASO,QAAQV,EAAeW,SACzB,KACHR,EAASM,eAEd,IAEIZ,GACHe,EAAAA,EAAAA,KAAA,OAAAC,EAAAA,EAAAA,GAAA,CAAKpB,IAAKA,GAASC,KAEnBkB,EAAAA,EAAAA,KAAA,OAAAC,EAAAA,EAAAA,GAAA,CAAKC,IAAKd,EAAgBe,IAAKvB,EAAkBC,IAAKA,GAASC,KC6CvE,GAAesB,EAAAA,EAAAA,IA7DWzB,IAAqB,IAApB,KAAE0B,EAAI,KAAEC,GAAM3B,EACrC,MAAQ4B,aAAcC,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAC1CC,EAAeH,EAAWI,SAE1BC,EAAcR,EAAKS,cACrB,CACIC,GAAI,sCAER,CACIC,KAAMV,EAAKU,OAGbC,EAAWZ,EAAKS,cAClB,CACIC,GAAI,uCAER,CACIC,KAAMV,EAAKU,OAIbE,EAAU,CACZC,EAAuBC,kBACvBT,EAAeQ,EAAuBE,sBAAwBF,EAAuBG,wBACvFC,OAAOC,SAET,OACIxB,EAAAA,EAAAA,KAAA,OAAKyB,UAAWP,EAAQQ,KAAK,KAAKC,UAC9BC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAE,8CAAAC,OAAgDzB,EAAK0B,YAAcC,MAAOpB,EAAYc,SAAA,EAC1F3B,EAAAA,EAAAA,KAAA,OAAKyB,UAAWN,EAAuBe,cAAcP,UACjD3B,EAAAA,EAAAA,KAACmC,EAAS,CACNhC,IAAKG,EAAK8B,KACVvD,IAAKoC,EACLrC,iBAAkByD,wDAG1BT,EAAAA,EAAAA,MAAA,OAAKH,UAAWN,EAAuBmB,gBAAgBX,SAAA,EACnD3B,EAAAA,EAAAA,KAAA,MAAA2B,SAAKrB,EAAKU,QACVY,EAAAA,EAAAA,MAAA,OAAKH,UAAWN,EAAuBoB,gBAAgBZ,SAAA,EACnD3B,EAAAA,EAAAA,KAACwC,EAAAA,EAAgB,CAACC,MAAOnC,EAAKoC,WAAYC,YAAY,uCACtD3C,EAAAA,EAAAA,KAACwC,EAAAA,EAAgB,CAACC,MAAOnC,EAAKsC,OAAQD,YAAY,mCAClD3C,EAAAA,EAAAA,KAACwC,EAAAA,EAAgB,CAACC,MAAOnC,EAAKuC,QAASF,YAAY,+C","sources":["webpack://frontend-challenges/./src/styles/countries-api/countries-list-item.module.scss?1dd5","components/CountriesList/common/LazyImage.js","components/CountriesList/CountriesListItem.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"link\":\"countries-list-item_link__aEs70\",\"wrapper\":\"countries-list-item_wrapper__W1iou\",\"content\":\"countries-list-item_content__rJoIY\",\"sr-only\":\"countries-list-item_sr-only__p3FWg\",\"sr-focusable\":\"countries-list-item_sr-focusable__iOrzH\",\"tableBordered\":\"countries-list-item_tableBordered__rTotw\",\"listItemContainer\":\"countries-list-item_listItemContainer__XljDN\",\"listItemContent\":\"countries-list-item_listItemContent__na9g4\",\"listItemContainerDark\":\"countries-list-item_listItemContainerDark__+Dp0j\",\"listItemContainerLight\":\"countries-list-item_listItemContainerLight__icdiA\"};","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst LazyImage = ({ placeholderImage, alt = \"\", ...props }) => {\n    const [inView, setInView] = useState(false);\n    const placeholderRef = useRef();\n\n    useEffect(() => {\n        const observer = new IntersectionObserver((entries, obs) => {\n            for (const entry of entries) {\n                if (entry.isIntersecting) {\n                    setInView(true);\n                    obs.disconnect();\n                }\n            }\n        }, {});\n        observer.observe(placeholderRef.current);\n        return () => {\n            observer.disconnect();\n        };\n    }, []);\n\n    return inView ? (\n        <img alt={alt} {...props} />\n    ) : (\n        <img ref={placeholderRef} src={placeholderImage} alt={alt} {...props} />\n    );\n};\n\nLazyImage.propTypes = {\n    placeholderImage: PropTypes.string.isRequired,\n    alt: PropTypes.string,\n};\n\nexport default LazyImage;\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { injectIntl } from \"react-intl\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../../GlobalStateProvider\";\nimport countriesListItemStyle from \"../../styles/countries-api/countries-list-item.module.scss\";\nimport CountryDataPoint from \"./CountryDataPoint\";\nimport LazyImage from \"./common/LazyImage\";\n\nconst CountriesListItem = ({ intl, data }) => {\n    const { countriesApi: globalData } = useContext(GlobalContext);\n    const currentTheme = globalData.darkMode;\n\n    const linkTooltip = intl.formatMessage(\n        {\n            id: \"countriesApi.countries.linkTooltip\",\n        },\n        {\n            name: data.name,\n        }\n    );\n    const imageAlt = intl.formatMessage(\n        {\n            id: \"countriesApi.countries.flagImageAlt\",\n        },\n        {\n            name: data.name,\n        }\n    );\n\n    const classes = [\n        countriesListItemStyle.listItemContainer,\n        currentTheme ? countriesListItemStyle.listItemContainerDark : countriesListItemStyle.listItemContainerLight,\n    ].filter(Boolean);\n\n    return (\n        <div className={classes.join(\" \")}>\n            <Link to={`/frontend-challenges/countries-api/country/${data.alpha3Code}`} title={linkTooltip}>\n                <div className={countriesListItemStyle.listItemImage}>\n                    <LazyImage\n                        src={data.flag}\n                        alt={imageAlt}\n                        placeholderImage={process.env.PUBLIC_URL + \"/assets/flag_placeholder.jpg\"}\n                    />\n                </div>\n                <div className={countriesListItemStyle.listItemContent}>\n                    <h3>{data.name}</h3>\n                    <div className={countriesListItemStyle.listItemDetails}>\n                        <CountryDataPoint value={data.population} labelIntlId=\"countriesApi.countries.population\" />\n                        <CountryDataPoint value={data.region} labelIntlId=\"countriesApi.countries.region\" />\n                        <CountryDataPoint value={data.capital} labelIntlId=\"countriesApi.countries.capital\" />\n                    </div>\n                </div>\n            </Link>\n        </div>\n    );\n};\n\nCountriesListItem.propTypes = {\n    intl: PropTypes.object.isRequired,\n    data: PropTypes.shape({\n        alpha3Code: PropTypes.string.isRequired,\n        name: PropTypes.string,\n        flag: PropTypes.string,\n        capital: PropTypes.string,\n        region: PropTypes.string,\n        population: PropTypes.number,\n    }).isRequired,\n};\n\nexport default injectIntl(CountriesListItem);\n"],"names":["_ref","placeholderImage","alt","props","_objectWithoutProperties","_excluded","inView","setInView","useState","placeholderRef","useRef","useEffect","observer","IntersectionObserver","entries","obs","entry","isIntersecting","disconnect","observe","current","_jsx","_objectSpread","ref","src","injectIntl","intl","data","countriesApi","globalData","useContext","GlobalContext","currentTheme","darkMode","linkTooltip","formatMessage","id","name","imageAlt","classes","countriesListItemStyle","listItemContainer","listItemContainerDark","listItemContainerLight","filter","Boolean","className","join","children","_jsxs","Link","to","concat","alpha3Code","title","listItemImage","LazyImage","flag","process","listItemContent","listItemDetails","CountryDataPoint","value","population","labelIntlId","region","capital"],"sourceRoot":""}