{"version":3,"file":"static/js/548.02ec9a0a.chunk.js","mappings":"wNACA,GAAgB,KAAO,kCAAkC,QAAU,qCAAqC,QAAU,qCAAqC,UAAU,qCAAqC,eAAe,0CAA0C,cAAgB,2CAA2C,kBAAoB,+CAA+C,OAAS,oCAAoC,YAAc,yCAAyC,gBAAkB,6CAA6C,OAAS,oCAAoC,uBAAyB,oDAAoD,sBAAwB,mDAAmD,kBAAoB,+CAA+C,gBAAkB,6CAA6C,sBAAwB,mDAAmD,uBAAyB,qD,wFCiC38B,EA/BkB,SAAH,GAAkD,IAA5CA,EAAgB,EAAhBA,iBAAiB,EAAD,EAAEC,IAAAA,OAAG,MAAG,GAAE,EAAKC,GAAK,YACrD,GAA4BC,EAAAA,EAAAA,WAAS,GAAM,eAApCC,EAAM,KAAEC,EAAS,KAClBC,GAAiBC,EAAAA,EAAAA,UAiBvB,OAfAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,IAAIC,sBAAqB,SAACC,EAASC,GAAS,IAC9B,EAD6B,UACpCD,GAAO,IAA3B,2BAA6B,CAAb,QACFE,iBACNR,GAAU,GACVO,EAAIE,aAEZ,CAAC,+BACL,GAAG,CAAC,GAEJ,OADAL,EAASM,QAAQT,EAAeU,SACzB,WACHP,EAASK,YACb,CACJ,GAAG,IAEIV,GACH,wBAAKH,IAAKA,GAASC,KAEnB,wBAAKe,IAAKX,EAAgBY,IAAKlB,EAAkBC,IAAKA,GAASC,GAEvE,EC2CA,GAAeiB,EAAAA,EAAAA,KA7DW,SAAH,GAAwB,IAAlBC,EAAI,EAAJA,KAAMC,EAAI,EAAJA,KAEzBC,GAD+BC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxCC,aACwBC,SAE1BC,EAAcP,EAAKQ,cACrB,CACIC,GAAI,sCAER,CACIC,KAAMT,EAAKS,OAGbC,EAAWX,EAAKQ,cAClB,CACIC,GAAI,uCAER,CACIC,KAAMT,EAAKS,OAIbE,EAAU,CACZC,EAAAA,kBACAX,EAAeW,EAAAA,sBAA+CA,EAAAA,wBAChEC,OAAOC,SAET,OACI,gBAAKC,UAAWJ,EAAQK,KAAK,KAAK,UAC9B,UAAC,KAAI,CAACC,GAAE,qDAAgDjB,EAAKkB,YAAcC,MAAOb,EAAY,WAC1F,gBAAKS,UAAWH,EAAAA,cAAqC,UACjD,SAAC,EAAS,CACNf,IAAKG,EAAKoB,KACVxC,IAAK8B,EACL/B,iBAAkB0C,wDAG1B,iBAAKN,UAAWH,EAAAA,gBAAuC,WACnD,wBAAKZ,EAAKS,QACV,iBAAKM,UAAWH,EAAAA,gBAAuC,WACnD,SAACU,EAAA,EAAgB,CAACC,MAAOvB,EAAKwB,WAAYC,YAAY,uCACtD,SAACH,EAAA,EAAgB,CAACC,MAAOvB,EAAK0B,OAAQD,YAAY,mCAClD,SAACH,EAAA,EAAgB,CAACC,MAAOvB,EAAK2B,QAASF,YAAY,6CAM3E,G","sources":["webpack://frontend-challenges/./src/styles/countries-api/countries-list-item.module.scss?1dd5","components/CountriesList/common/LazyImage.js","components/CountriesList/CountriesListItem.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"link\":\"countries-list-item_link__QgMVT\",\"wrapper\":\"countries-list-item_wrapper__SY5Hj\",\"content\":\"countries-list-item_content__WUG2O\",\"sr-only\":\"countries-list-item_sr-only__-pRWE\",\"sr-focusable\":\"countries-list-item_sr-focusable__L5hSz\",\"tableBordered\":\"countries-list-item_tableBordered__b9Wa8\",\"solutionContainer\":\"countries-list-item_solutionContainer__kaDrV\",\"header\":\"countries-list-item_header__tavvP\",\"headerTitle\":\"countries-list-item_headerTitle__Q-q0V\",\"themeModeButton\":\"countries-list-item_themeModeButton__My8o5\",\"footer\":\"countries-list-item_footer__o2En1\",\"solutionContainerLight\":\"countries-list-item_solutionContainerLight__7qGlS\",\"solutionContainerDark\":\"countries-list-item_solutionContainerDark__bTw9Z\",\"listItemContainer\":\"countries-list-item_listItemContainer__xXHMx\",\"listItemContent\":\"countries-list-item_listItemContent__fj1ML\",\"listItemContainerDark\":\"countries-list-item_listItemContainerDark__jQR5-\",\"listItemContainerLight\":\"countries-list-item_listItemContainerLight__270hL\"};","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst LazyImage = ({ placeholderImage, alt = \"\", ...props }) => {\r\n    const [inView, setInView] = useState(false);\r\n    const placeholderRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver((entries, obs) => {\r\n            for (const entry of entries) {\r\n                if (entry.isIntersecting) {\r\n                    setInView(true);\r\n                    obs.disconnect();\r\n                }\r\n            }\r\n        }, {});\r\n        observer.observe(placeholderRef.current);\r\n        return () => {\r\n            observer.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    return inView ? (\r\n        <img alt={alt} {...props} />\r\n    ) : (\r\n        <img ref={placeholderRef} src={placeholderImage} alt={alt} {...props} />\r\n    );\r\n};\r\n\r\nLazyImage.propTypes = {\r\n    placeholderImage: PropTypes.string.isRequired,\r\n    alt: PropTypes.string,\r\n};\r\n\r\nexport default LazyImage;\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GlobalContext } from \"../../GlobalStateProvider\";\r\nimport countriesListItemStyle from \"../../styles/countries-api/countries-list-item.module.scss\";\r\nimport CountryDataPoint from \"./CountryDataPoint\";\r\nimport LazyImage from \"./common/LazyImage\";\r\n\r\nconst CountriesListItem = ({ intl, data }) => {\r\n    const { countriesApi: globalData } = useContext(GlobalContext);\r\n    const currentTheme = globalData.darkMode;\r\n\r\n    const linkTooltip = intl.formatMessage(\r\n        {\r\n            id: \"countriesApi.countries.linkTooltip\",\r\n        },\r\n        {\r\n            name: data.name,\r\n        }\r\n    );\r\n    const imageAlt = intl.formatMessage(\r\n        {\r\n            id: \"countriesApi.countries.flagImageAlt\",\r\n        },\r\n        {\r\n            name: data.name,\r\n        }\r\n    );\r\n\r\n    const classes = [\r\n        countriesListItemStyle.listItemContainer,\r\n        currentTheme ? countriesListItemStyle.listItemContainerDark : countriesListItemStyle.listItemContainerLight,\r\n    ].filter(Boolean);\r\n\r\n    return (\r\n        <div className={classes.join(\" \")}>\r\n            <Link to={`/frontend-challenges/countries-api/country/${data.alpha3Code}`} title={linkTooltip}>\r\n                <div className={countriesListItemStyle.listItemImage}>\r\n                    <LazyImage\r\n                        src={data.flag}\r\n                        alt={imageAlt}\r\n                        placeholderImage={process.env.PUBLIC_URL + \"/assets/flag_placeholder.jpg\"}\r\n                    />\r\n                </div>\r\n                <div className={countriesListItemStyle.listItemContent}>\r\n                    <h3>{data.name}</h3>\r\n                    <div className={countriesListItemStyle.listItemDetails}>\r\n                        <CountryDataPoint value={data.population} labelIntlId=\"countriesApi.countries.population\" />\r\n                        <CountryDataPoint value={data.region} labelIntlId=\"countriesApi.countries.region\" />\r\n                        <CountryDataPoint value={data.capital} labelIntlId=\"countriesApi.countries.capital\" />\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nCountriesListItem.propTypes = {\r\n    intl: PropTypes.object.isRequired,\r\n    data: PropTypes.shape({\r\n        alpha3Code: PropTypes.string.isRequired,\r\n        name: PropTypes.string,\r\n        flag: PropTypes.string,\r\n        capital: PropTypes.string,\r\n        region: PropTypes.string,\r\n        population: PropTypes.number,\r\n    }).isRequired,\r\n};\r\n\r\nexport default injectIntl(CountriesListItem);\r\n"],"names":["placeholderImage","alt","props","useState","inView","setInView","placeholderRef","useRef","useEffect","observer","IntersectionObserver","entries","obs","isIntersecting","disconnect","observe","current","ref","src","injectIntl","intl","data","currentTheme","useContext","GlobalContext","countriesApi","darkMode","linkTooltip","formatMessage","id","name","imageAlt","classes","countriesListItemStyle","filter","Boolean","className","join","to","alpha3Code","title","flag","process","CountryDataPoint","value","population","labelIntlId","region","capital"],"sourceRoot":""}